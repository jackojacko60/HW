<!DOCTYPE html>

<html>

<head>
<style>
body {
	  background-color: #fff;
	  color: #111;
	  margin: 0px;
	  overflow: hidden;
	  font-family: Monospace;
	  font-size: 20px;
	  position: absolute;
}
  
#info {
	  position: absolute;
	  top: 0px;
	  width: 100%;
	  padding: 5px;
	  text-align: center;
	  color: #ffff00
}

</style>
</head>

<body> 
<div id="info">
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js">
</script>

<script src="https://raw.githack.com/mrdoob/three.js/master/examples/js/utils/BufferGeometryUtils.js"></script>
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="https://raw.githack.com/mrdoob/three.js/dev/examples/js/loaders/MTLLoader.js"></script>
    <script src="https://raw.githack.com/mrdoob/three.js/dev/examples/js/loaders/OBJLoader.js"></script>
<script src="https://raw.githack.com/mrdoob/three.js/dev/examples/js/geometries/TeapotBufferGeometry.js"></script>

<script id="vs-normalmap" type="x-shader/x-vertex">
    uniform vec3 lightpos;

	attribute vec4 tangent;
	varying vec2 vUv;
	varying vec3 vTangent;
	varying vec3 vBitangent;
	varying vec3 vNormal;
	varying vec3 vLL;

	void main() {
	  vec4 vWorldpos = modelMatrix * vec4( position, 1.0 ) ;
	  vec2 myrepeat = vec2 (1.0, 1.0);
	  vUv = myrepeat*uv;

      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

	  // TBN in eyespace 
	  // no need to normalize these varying variable
	  // as they will be normalized in fragment shader
	  //
        vNormal = normalMatrix * normal ;
		vTangent = normalMatrix * tangent.xyz ;
		vBitangent = cross( vNormal, vTangent ) ;

		vLL = normalMatrix * (lightpos - vWorldpos.xyz);
	}

</script>
	
<script id='fs-normalmap' type="x-shader/x-vertex">
	
	uniform sampler2D tNormal;
	varying vec2 vUv;
	varying vec3 vTangent;
	varying vec3 vBitangent;
	varying vec3 vNormal;
	varying vec3 vLL;

	void main() {
		
		vec3 normalTex = texture2D (tNormal, vUv).xyz * 2.0 - 1.0;
		normalTex.xy *= 10.0;    // exaggerate the normal deviation
		normalTex = normalize( normalTex );

		mat3 tsb = mat3( normalize( vTangent ), normalize( vBitangent ), normalize( vNormal ) );
		vec3 finalNormal = tsb * normalTex;
		float ndotl = dot (normalize (vLL), normalize (finalNormal));
		gl_FragColor = vec4( vec3(ndotl), 1 );

	}
</script>
<script id="vs-sobel" type="x-shader/x-vertex">
  varying vec2 vUv; 
  void main() { 
     gl_Position = projectionMatrix* modelViewMatrix * vec4( position, 1.0); 
     vUv = uv; 
  }
</script>
<script id="fs-sobel" type="x-shader/x-fragment">
  uniform sampler2D texture; 
  uniform vec2 imageSize;
  varying vec2 vUv; 
  float step_w = 1.0/imageSize.x; 
  float step_h = 1.0/imageSize.y; 
  void main() { 
  	float kernel[9];
  	 
    vec2 offset[9]; 
  	offset[0]=vec2(-step_w, -step_h); 
  	offset[1]=vec2(0.0, -step_h); offset[2]= vec2(step_w, -step_h), 
  	offset[3]=vec2(-step_w, 0.0), offset[4]=vec2(0.0, 0.0), offset[5]=vec2(step_w, 0.0), 
  	offset[6]=vec2(-step_w, step_h), offset[7]=vec2(0.0, step_h), offset[8]=vec2(step_w, step_h); 
  	
	// sobel filter - Gx
	for (int i = 0; i < 9; i++) kernel[i]=0.0; 
	kernel[0] = -1.0; kernel[2] = 1.0;
	kernel[3] = -2.0; kernel[5] =  2.0;
	kernel[6] = -1.0; kernel[8] = 1.0;

  	vec3 sumX= vec3(0.0); 
  	for (int i=0 ; i < 9; i++) { 
    	vec3 tmp=texture2D (texture, vUv+offset[i]).rgb; 
      	sumX += tmp*kernel[i]; 
    }
    
	// sobel filter - Gy
	for (int i = 0; i < 9; i++) kernel[i]=0.0; 
	kernel[6] = -1.0; kernel[7] = -2.0; kernel[8] = -1.0;
	kernel[0] = 1.0; kernel[1] = 2.0; kernel[2] = 1.0;

  	vec3 sumY= vec3(0.0); 
  	for (int i=0 ; i < 9; i++) { 
    	vec3 tmp=texture2D (texture, vUv+offset[i]).rgb; 
      	sumY += tmp*kernel[i]; 
    }
	vec3 delX = vec3 (1, 0, sumX);
	vec3 delY = vec3 (0, 1, sumY);
	vec3 n = normalize (cross (delX, delY));
	
	vec3 encode = (n + vec3 (1))/2.0;
     
  	gl_FragColor = vec4 (encode, 1.0); 
  }

</script>
<script id="vs-texSwap" type="x-shader/x-vertex">
  uniform int which; // 0, 1
  varying vec2 vUv; 
  void main() {
     gl_Position = projectionMatrix* modelViewMatrix * vec4( position, 1.0);      
     vUv = vec2 ((uv.s + float(which))/4., uv.t); 
  }
</script>
<script id="fs-texSwap" type="x-shader/x-fragment">
  uniform sampler2D texture; 
  varying vec2 vUv; 
  void main() {
    vec3 color = texture2D (texture, vUv).rgb;
  	gl_FragColor = vec4 (color, 1.0); 
  }
</script>

<script>


var scene, renderer, camera,scene0,camerap,scenep;
var shaderMaterial,shaderMaterials;
var angle = 0,which =0;
var renderTarget;
var leg1,leg2,arm1,arm2,legmove,angles=0,whichloder =1;
init();
animate();

function init() {
  width = window.innerWidth;
  height = window.innerHeight;
  
  renderer = new THREE.WebGLRenderer({
    antialias: true
  });
  renderer.setSize(width, height);
  document.body.appendChild(renderer.domElement);
  renderer.setClearColor(0x888888);

  scene = new THREE.Scene();
  scene0 = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);
  scenep=new THREE.Scene();
  camera0 = new THREE.OrthographicCamera (-25,25,25,-25,-200,200);
  camerap= new THREE.OrthographicCamera (-50,50,50,-50,-200,200);
  // camera0=new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
 	//camerap = new THREE.OrthographicCamera (-256,80,80,-80,-200,200);
  camera.position.y = 80;
  camera.position.z = 400;
  camera.lookAt(new THREE.Vector3(0, 0, 0));
  
  let controls = new THREE.OrbitControls(camera, renderer.domElement);

  light = new THREE.PointLight ();
  scene.add (light);
  scene.add (new THREE.PointLightHelper (light,5));

  var gridXZ = new THREE.GridHelper(400, 20, 'red', 'white');
  //scene.add(gridXZ);

  window.addEventListener('resize', onWindowResize, false);
  function onWindowResize() {
  	camera.aspect = window.innerWidth / window.innerHeight;
  	camera.updateProjectionMatrix();
  	renderer.setSize(window.innerWidth, window.innerHeight);
  }

  //
  
  ////////////////////////////////////////////////////////////////////////


renderTarget = new THREE.WebGLRenderTarget( 128,128);
 renderTargets = new THREE.WebGLRenderTarget( 128,128);
 /////
 
  /*let loader = new THREE.TextureLoader();
  loader.setCrossOrigin ('');
  let texture = loader.load('https://i.imgur.com/A7iqfXD.png'); */ // olympus
  //let texture = loader.load('https://i.imgur.com/nv73w3f.jpg');
  //let texture = loader.load('https://i.imgur.com/NHXZYjr.png?2');  // gakki

   var uniforms = {
    imageSize: {
      type: 'v2',
      value: new THREE.Vector2(256,256)
    },
    texture: {
      type: 't',
      value:renderTargets.texture
    } ,

    
  };

  var vertShader = document.getElementById('vs-sobel').textContent;
  var fragShader = document.getElementById('fs-sobel').textContent;
  material_shader = new THREE.ShaderMaterial({
    uniforms: uniforms,
    vertexShader: vertShader,
    fragmentShader: fragShader,
    side: THREE.DoubleSide
  });

  var geometry = new THREE.PlaneBufferGeometry( 100,100 );
   THREE.BufferGeometryUtils.computeTangents(geometry);
  var mesh = new THREE.Mesh (geometry, material_shader);
 
  scene0.add (mesh);
  
  
  
  
  
  var uniforms1 = {
    imageSize: {
      type: 'v2',
      value: renderTarget.width
    },
    tNormal: {
      type: 't',
      value: renderTarget.texture
    } ,
    		  lightpos: {
        type: 'v3',
        value: new THREE.Vector3(0, 30, 20)
      }
    
  };

 
  var vertShader1 = document.getElementById('vs-normalmap').textContent;
  var fragShader1 = document.getElementById('fs-normalmap').textContent;
  
  shaderMaterial = new THREE.ShaderMaterial({
    uniforms: uniforms1,
    vertexShader: vertShader1,
    fragmentShader: fragShader1,
		side: THREE.DoubleSide
  });
  
	//var bs = new THREE.Mesh(new THREE.PlaneGeometry(100,100), shaderMaterial);
  
  
 var geometry2 = new THREE.PlaneBufferGeometry( 100,100 );
  THREE.BufferGeometryUtils.computeTangents(geometry2);
  
  
  let bs = new THREE.Mesh (geometry2, shaderMaterial)
  scene.add(bs);
  bs.position.y=50;
  bs.rotation.y+=Math.PI/2;
  bs.position.x+=195;
  let bs2 = new THREE.Mesh (geometry2, shaderMaterial)
  scene.add(bs2);
  bs2.position.y=50;
  bs2.rotation.y+=Math.PI/2;
  bs2.position.x+=195;
  bs2.position.z+=100;
  let bs3 = new THREE.Mesh (geometry2, shaderMaterial)
  scene.add(bs3);
  bs3.position.y=50;
  bs3.rotation.y+=Math.PI/2;
  bs3.position.x+=195;
  bs3.position.z-=100;
  //////////////////////switch
  
  var uniforms2 = {
    texture: {
      type: 't',
      value: null
    } ,
    which: {
      type: 'i',
      value: 0
    }
  };

  var vertShader2 = document.getElementById('vs-texSwap').textContent;
  var fragShader2 = document.getElementById('fs-texSwap').textContent;
  shaderMaterials = new THREE.ShaderMaterial({
    uniforms: uniforms2,
    vertexShader: vertShader2,
    fragmentShader: fragShader2,
    side: THREE.DoubleSide
  });
  loader = new THREE.TextureLoader();
  loader.crossOrigin = '';
  let mickeys = 'https://i.imgur.com/to1lxVt.jpg';
  //let mickeys = 'https://i.imgur.com/c6wczWy.jpg';
  texture = loader.load(mickeys, function (tex) {
    texture.wrapS = THREE.RepeatWrapping;
  	console.log (tex.image.width + ', ' + tex.image.height);
  	shaderMaterials.uniforms.texture.value= tex;
  });  

  let plane = new THREE.Mesh (new THREE.PlaneGeometry(40,40), shaderMaterials);
  scenep.add (plane);
  //scenep.add(gridXZ);
  //plane.position.y = 5;

  /*function incWhich() {
  	which += 1;
  	shaderMaterials.uniforms.which.value = which;
  	setTimeout (incWhich, 1000);
  }
  setTimeout (incWhich, 0);*/

  /////////////////////
  lodertable();
 loderpenbox();
 pen();

     theObject =  new THREE.Object3D();
  readModel('WoodChair',60);
  readModel('lamp',40); 
len();

let floor = new THREE.Mesh (new THREE.PlaneGeometry (400,400), new THREE.MeshPhongMaterial());
  floor.rotation.x = -Math.PI/2;
   scene.add (floor);
}
function pen(){
  let loader = new THREE.TextureLoader();
  loader.crossOrigin = '';	
  let treadTex = loader.load('https://i.imgur.com/cCjirzS.jpg');
  let Material = new THREE.MeshPhongMaterial({
    map: treadTex,
    side: THREE.DoubleSide
  });
  let treadTex2 = loader.load('https://i.imgur.com/u2TQzO7.jpg');
  let Material2 = new THREE.MeshPhongMaterial({
    map: treadTex2,
    side: THREE.DoubleSide
  });
  treadTex = loader.load('https://i.imgur.com/iXsKT9H.png');
  let Material3 = new THREE.MeshPhongMaterial({
    map: treadTex,
    side: THREE.DoubleSide
  });
  var p = new THREE.Mesh(new THREE.CylinderBufferGeometry(1,1, 15, 20), Material);
  
  var cone = new THREE.Mesh( new THREE.ConeBufferGeometry( 1, 4, 32 ), Material2 );
  cone.position.y=9.5;
  p.add( cone );
  scene.add(p);
  p.rotation.z=Math.PI/8;
  p.position.set(-28.1,40,20);

  var p2 = new THREE.Mesh(new THREE.CylinderBufferGeometry(1,1, 15, 20), Material);
  var cone2 = new THREE.Mesh( new THREE.ConeBufferGeometry( 1, 4, 32 ), Material3 );
  cone2.position.y=9.5;
  p2.add( cone2 );
  scene.add(p2);
  p2.rotation.x=Math.PI/7;
  p2.rotation.z=Math.PI/8;
  p2.position.set(-26,40,23);
}

function loderpenbox(){
	let loader = new THREE.TextureLoader();
  loader.crossOrigin = '';
  let treadTex = loader.load('https://i.imgur.com/w8az8XY.jpg');
  let alpha = loader.load('https://i.imgur.com/uIOXJ2D.png');
  treadTex.repeat.set(1, 1)
  treadTex.wrapS = THREE.RepeatWrapping
  let treadMat = new THREE.MeshPhongMaterial({
    map: treadTex,
    alphaMap: alpha,
    transparent: true,
    side: THREE.DoubleSide
  });
  let treadMat2 = new THREE.MeshPhongMaterial({
    map: treadTex,
    side: THREE.DoubleSide
  });
  let geometry2 = new THREE.CylinderGeometry(5, 5, 10, 80, 2, true);
  let tread2 = new THREE.Mesh(geometry2,treadMat );
  let dot = new THREE.Mesh(new THREE.CylinderGeometry(5, 5, 1, 20),treadMat2 )
  dot.position.set(0,-4,0);
  tread2.add(dot); 
  tread2.position.set(-25,37,20);
  scene.add(tread2);


}

  function lodertable(){
    let loader = new THREE.TextureLoader();
    loader.crossOrigin = '';
    let matArray=new THREE.MeshPhongMaterial({
      map: loader.load('https://i.imgur.com/PZWNrd2.jpg'),
      side: THREE.DoubleSide});
    var box = new THREE.Mesh(new THREE.BoxGeometry(50, 5, 100), matArray);
    box.position.set(-30, 30, 0);
    scene.add(box);
    var part = [];
    for(var i=0;i<4;i++){
          part[i] = new THREE.Mesh(new THREE.CylinderBufferGeometry(3,2, 30, 64), matArray);
          var circle = new THREE.Mesh(new THREE.DodecahedronGeometry(3,5),matArray);
          circle.position.y-=10;
          part[i].add(circle);
      		scene.add(part[i]);
    }

    part[0].position.set(-51.5,15,-46.5);
    part[1].position.set(-51.5,15,46.5);
    part[2].position.set(-8.5,15,-46.5);
    part[3].position.set(-8.5,15,46.5);
   /* var wall1 = new THREE.Mesh(new THREE.BoxGeometry(400, 100, 5), matArray);
    wall1.position.set(0,50,200);
    scene.add(wall1);*/
    var wall2 = new THREE.Mesh(new THREE.BoxGeometry(400, 100, 5), matArray);
    wall2.position.set(0,50,-200);
    scene.add(wall2);
    var wall3 = new THREE.Mesh(new THREE.BoxGeometry(400, 100, 5), matArray);
    wall3.position.set(200,50,0);
    wall3.rotation.y+=Math.PI/2;
    scene.add(wall3);
    var wall4 = new THREE.Mesh(new THREE.BoxGeometry(400, 100, 5), matArray);
    wall4.position.set(-200,50,0);
    wall4.rotation.y+=Math.PI/2;
    scene.add(wall4);
}

 function readModel (modelName, targetSize) {
  var onProgress = function(xhr) {
    if (xhr.lengthComputable) {
      var percentComplete = xhr.loaded / xhr.total * 100;
      console.log(Math.round(percentComplete, 2) + '% downloaded');
    }
  };

  var onError = function(xhr) {};

  var mtlLoader = new THREE.MTLLoader();
  mtlLoader.setPath('models/');
  mtlLoader.load(modelName+'.mtl', function(materials) {

    materials.preload();

    var objLoader = new THREE.OBJLoader();
    objLoader.setMaterials(materials);
    objLoader.setPath('models/');
    objLoader.load(modelName+'.obj', function(object) {
		
		theObject =  unitize (object, targetSize);
		//theObject.add ( new THREE.BoxHelper (theObject) )
		theObject.name = 'OBJ'
		scene.add(theObject);
		theObject.castShadow = true
  		theObject.receiveShadow = true
		theObject.setRotationFromEuler (new THREE.Euler (3.1416/2, 0, -3.1416/2, 'ZYX'))
		
    }, onProgress, onError);

  });


}


////////////////////////////////////////
// wrap an Object3D around the given object
// so that it is centered at +Y axis
// 
function unitize (object, targetSize) {  
	
	// find bounding box of 'object'
	var box3 = new THREE.Box3();
	box3.setFromObject (object);
	var size = new THREE.Vector3();
	size.subVectors (box3.max, box3.min);
	var center = new THREE.Vector3();
	center.addVectors(box3.max, box3.min).multiplyScalar (0.5);
	
	console.log ('center: ' + center.x + ', '+center.y + ', '+center.z );
	console.log ('size: ' + size.x + ', ' +  size.y + ', '+size.z );
	
	// uniform scaling according to objSize
	var objSize = Math.max (size.x, size.y, size.z);
	var scaleSet = targetSize/objSize;
				
	
	theObject.add (object);
	object.scale.set (scaleSet, scaleSet, scaleSet);
        //console.log(whichloder);
	object.traverse( function ( child ) {

    	if ( child instanceof THREE.Mesh ) {

           child.castShadow = true;
	   child.receiveShadow = true
    	}

	} );
        if(whichloder==1){
	   object.position.set (-center.x*scaleSet, -center.y*scaleSet, -center.z*scaleSet+30);
	   object.rotation.x-=Math.PI;
	   object.rotation.y-=Math.PI/2;
           whichloder=2;
	   
	}
        else if(whichloder==2){
		
	   object.position.set (-center.x*scaleSet-52.5, -center.y*scaleSet+30, -center.z*scaleSet+45);
	   object.rotation.x+=Math.PI*2/3;
	   object.rotation.z+=Math.PI/2;
        }

	return theObject;
			
}    
function len(){
   var material = new THREE.MeshPhongMaterial({
      color: "rgb(135, 102, 0)" ,
      side: THREE.DoubleSide 
    });
    var materials = new THREE.MeshPhongMaterial({
      color: "rgb(168, 142, 64)" ,
      side: THREE.DoubleSide 
    });
    var base = new THREE.Mesh(new THREE.BoxGeometry(50, 30, 30), material);
    base.position.set(50, 70, 0);
    
    var geometry = new THREE.CircleBufferGeometry(3, 32);
    var cymaterial = new THREE.MeshPhongMaterial({
      color: "black" ,
      side: THREE.DoubleSide 
    });
    circle = new THREE.Mesh(geometry, cymaterial);
    circle.position.set(40, 73, 16);
    circle1 = new THREE.Mesh(geometry, cymaterial);
    circle1.position.set(60, 73, 16);  
    var ge = new THREE.CircleBufferGeometry(5, 1);
    circle2 = new THREE.Mesh(ge, cymaterial);
    circle2.position.set(50, 65, 16);
    circle2.rotation.z=1.55;
    
    var base2 = new THREE.Mesh(new THREE.BoxGeometry(25, 40, 25), material);
    base2.position.set(50, 40, 0);
    
    arm1 = new THREE.Mesh(new THREE.BoxGeometry(10, 40, 10), material);
    arm1.position.set(28, 40, 0);
    arm1.rotation.z=-0.4;
    arm2 = new THREE.Mesh(new THREE.BoxGeometry(10, 40, 10), material);
    arm2.position.set(72, 40, 0);
    arm2.rotation.z=0.4;
    
    leg1 = new THREE.Mesh(new THREE.BoxGeometry(10, 20, 10), material);
    leg1.position.set(43, 10, 0);
    leg2 = new THREE.Mesh(new THREE.BoxGeometry(10, 20, 10), material);
    leg2.position.set(57, 10, 0);
    
    var c1 = new THREE.Mesh(new THREE.BoxGeometry(10, 0, 25), materials);
    c1.position.set(62, 20, 0);
    c1.rotation.z=-0.7;
    var c2 = new THREE.Mesh(new THREE.BoxGeometry(10, 0, 25), materials);
    c2.position.set(35, 20, 0);
    c2.rotation.z=0.7;
    var c3 = new THREE.Mesh(new THREE.BoxGeometry(25, 0, 10), materials);
    c3.position.set(50, 20, 15);
    c3.rotation.x=0.7;
    var c4 = new THREE.Mesh(new THREE.BoxGeometry(25, 0, 10), materials);
    c4.position.set(50, 20, -15);
    c4.rotation.x=-0.7;
    ushape = new THREE.Group();
    ushape.add(base);  
    ushape.add(base2); 
    ushape.add(circle);  
    ushape.add(circle1); 
    ushape.add(circle2);
    ushape.add(arm1); 
    ushape.add(arm2); 
    ushape.add(leg1); 
    ushape.add(leg2); 
    ushape.add(c1); 
    ushape.add(c2); 
    ushape.add(c3);
    ushape.add(c4);
    ushape.position.x+=100;
    scene.add(ushape);
}

function animate() {

  requestAnimationFrame(animate);
  if(camera.position.z>0&&camera.position.y>50) which=0;
  else if(camera.position.z>0&&camera.position.y<50) which=1;
  else if(camera.position.z<0&&camera.position.y>50) which=2;
  else which=3;
  shaderMaterials.uniforms.which.value = which;
  angle += 0.01;
  light.position.set (150*Math.cos(angle), 80, 150*Math.sin(angle));
  shaderMaterial.uniforms.lightpos.value.copy (light.position);
  
	renderer.setRenderTarget (renderTargets);
  renderer.setClearColor (0x000000);
  renderer.clear();
  renderer.render (scenep, camerap);
  
  renderer.setRenderTarget (renderTarget);
  renderer.setClearColor (0x000000);
  renderer.clear();
  renderer.render (scene0, camera0);
  
  renderer.setRenderTarget (null);
  renderer.setClearColor (0x888888);
  renderer.clear();
  renderer.render(scene, camera);
  
  angles += 0.01;
  ushape.rotation.y-=0.01; 
if(legmove){
     leg1.rotation.x+=0.01;
     leg2.rotation.x-=0.01;
     arm1.rotation.x-=0.01;
     arm2.rotation.x+=0.01;
  }
  else {
     leg1.rotation.x-=0.01;
     leg2.rotation.x+=0.01;
     arm1.rotation.x+=0.01;
     arm2.rotation.x-=0.01;
   }
   if(leg1.rotation.x>=Math.PI/4) legmove=!legmove;
   if(leg1.rotation.x<=-Math.PI/4) legmove=!legmove;
}


</script>
</body>

</html>