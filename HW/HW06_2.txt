<!DOCTYPE html>

<html>

<head>
<style>
	body {
	  background-color: #fff;
	  color: #111;
	  margin: 0px;
	  overflow: hidden;
	  font-family: Monospace;
	  font-size: 20px;
	  position: absolute;
	}
  
	#info {
	  position: absolute;
	  top: 0px;
	  width: 100%;
	  padding: 5px;
	  text-align: center;
	  color: #ffff00
	}


</style>
</head>

<body> 
<div id="info">
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js">
</script>
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="https://raw.githack.com/mrdoob/three.js/dev/examples/js/loaders/MTLLoader.js"></script>
    <script src="https://raw.githack.com/mrdoob/three.js/dev/examples/js/loaders/OBJLoader.js"></script>
<script src="https://raw.githack.com/mrdoob/three.js/dev/examples/js/geometries/TeapotBufferGeometry.js"></script>
<!-- shader for eyeNormal Plot -->
<script id="vsNormal" type="x-shader/x-vertex">
  varying vec3 vNormal;
  void main() { 
  	gl_Position = projectionMatrix* modelViewMatrix * vec4( position, 1.0); 
    vNormal = normalMatrix*normal;
  }
</script>
<script id="fsNormal" type="x-shader/x-fragment">
  varying vec3 vNormal; // [-1,1]^3
  void main() {    
  	vec3 color = (normalize(vNormal)+1.0)/2.; // [0,1]^3
  	gl_FragColor = vec4 (color,1);
  }
</script>

<!-- shader for Lapace filter -->
<!-- with background discard  -->

<script id="vsFilter" type="x-shader/x-vertex">
  varying vec2 vUv; 
  void main() { 
    gl_Position = projectionMatrix* modelViewMatrix * vec4( position, 1.0); 
    vUv = uv; 
  }
</script>
<script id="fsFilter" type="x-shader/x-fragment">
  uniform sampler2D texture; 
  uniform int imageSize;
  varying vec2 vUv; 
  void main() { 
    float step_w = 1.0/float(imageSize); 
    float step_h = 1.0/float(imageSize); 
	// Laplace filter
	float kernel[9]; 
    kernel[0] = kernel[2] = kernel[6] = kernel[8] = 0.0/1.0; 
    kernel[1] = kernel[3] = kernel[5] = kernel[7] = 1.0/1.0; 
    kernel[4] = -4.0/1.0; 
    vec2 offset[9]; 
    offset[0]=vec2(-step_w, -step_h); 
    offset[1]=vec2(0.0, -step_h); offset[2]= vec2(step_w, -step_h), 
    offset[3]=vec2(-step_w, 0.0), offset[4]=vec2(0.0, 0.0), offset[5]=vec2(step_w, 0.0), 
    offset[6]=vec2(-step_w, step_h), offset[7]=vec2(0.0, step_h), offset[8]=vec2(step_w, step_h); 
  
    vec3 sum= vec3(0.0); 
 	for (int i=0 ; i < 9; i++) { 
       vec3 tmp=texture2D (texture, vUv+offset[i]).rgb; 
       sum += tmp*kernel[i]; 
    }

    if ((sum.r+sum.g+sum.b)/3.0 < 0.1) // if close to (0,0,0)
  	   discard;
    else 
  	   gl_FragColor = vec4 (0,0,0, 1.0); 
  }
</script>

<!-- shader to cutout "background" -->
<script id="vsCut" type="x-shader/x-vertex">
  varying vec2 vUv; 
  void main() { 
    gl_Position = projectionMatrix* modelViewMatrix * vec4( position, 1.0); 
    vUv = uv; 
  }
</script>
<script id="fsCut" type="x-shader/x-vertex">
  uniform sampler2D texture; 
  varying vec2 vUv;
  void main() {
  	vec3 color = texture2D (texture, vUv).rgb;
  	if (color.r > 0.95 && color.g > 0.95 && color.b < 0.05)  // close to (1,1,0)
  	   discard;
  	else
  		gl_FragColor = vec4 (color, 1);
  }
</script>
<script id="myVertexShader" type="x-shader/x-vertex">
	uniform vec3 lightpos;
	varying float ndotl;
  varying vec3 lightdir;
  varying vec3 eyenorm;
  
  void main() {
		gl_Position = projectionMatrix* modelViewMatrix * vec4( position, 1.0);
		
	  //vec4 worldpos = modelMatrix * vec4 (position, 1.0);
    //ndotl = dot (normalize(lightpos.xyz - worldpos.xyz), normal);
    vec4 eyepos = modelViewMatrix * vec4 (position, 1.0);
    vec4 lighteye = viewMatrix * vec4 (lightpos, 1.0);
    lightdir = lighteye.xyz - eyepos.xyz;
    eyenorm = normalMatrix * normal;
  }
</script>
<script id="myFragmentShader" type="x-shader/x-fragment">
	varying float ndotl;
  varying vec3 lightdir;
  varying vec3 eyenorm;
  
	void main() {
		float nn = dot (normalize(lightdir), normalize(eyenorm));
    if (nn > 0.8) {
			nn= 1.0;
		} else if (nn > 0.6) {
			nn = 0.6;
		} else {
			nn = 0.2;
		}
		gl_FragColor = vec4 (.72/.255*nn, .224/.255*nn, .224/.255*nn , 1.0);
	}
</script>
<script>
var scene, renderer, camera;
var material_shh;
var sceneRTT, cameraRTT;
var renderTarget;
var planeXX;
var subject, subjectClone;
var leg1,leg2,arm1,arm2,legmove,angles=0,material_shh_normal,teapotMaterial,whichloder=1;
init();
animate();

function init() {

  renderer = new THREE.WebGLRenderer({
    antialias: true
  });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);
  renderer.setClearColor(0x888888);
  renderer.autoClear = false;
  
  // scene & camera: for final result
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
  camera.position.set (0, 80, 400);

  let controls = new THREE.OrbitControls(camera, renderer.domElement);


  window.addEventListener('resize', onWindowResize, false);

  //////////////////////////////////////////////////////////////

  
   material_shh_normal = new THREE.ShaderMaterial({
    vertexShader: document.getElementById('vsNormal').textContent,
    fragmentShader: document.getElementById('fsNormal').textContent,
    uniforms: {
      lightpos: {
        type: 'v3',
        value: new THREE.Vector3(0, 30, 20)
      }
    },
   /* vertexShader: document.getElementById('myVertexShader').textContent,
    fragmentShader: document.getElementById('myFragmentShader').textContent,*/
  });

  // scene0: contains a torusKnot with shaderMaterial (for outline)
  // camera0: ortho camera
  var geometry = new THREE.TeapotBufferGeometry(5);
  scene0 = new THREE.Scene();
   subject = new THREE.Mesh (geometry,
  	material_shh_normal);
    subject.position.set(0,12,0)
  scene0.add (subject);
  camera0 = new THREE.OrthographicCamera (-20,20,20,-20,-200,200);
    
  ////////////////////////////////////////////////////////

  renderTarget = new THREE.WebGLRenderTarget( 512,512);

  var uniforms = {
    imageSize: {
    	type: 'i',
      value: renderTarget.width
    },
    texture: {
    	type: 't',
      value: renderTarget.texture
    }
  };

  material_shh = new THREE.ShaderMaterial({
    uniforms: uniforms,
    vertexShader: document.getElementById('vsFilter').textContent,
    fragmentShader: document.getElementById('fsFilter').textContent
  });

  // sceneRTT: contains a plane to draw the outline  
  sceneRTT = new THREE.Scene();
  cameraRTT = new THREE.OrthographicCamera(-50, 50, 50, -50, -10, 10);
  var bs = new THREE.Mesh(new THREE.PlaneGeometry(100,100), material_shh);
  sceneRTT.add(bs);
  
 ///////////////////////////////////////////////////////////////////
  // sceneRegular: contains the torusKnot with PhongMaterial
  // and all lights to light up the torusKnot
  
  teapotMaterial = new THREE.ShaderMaterial({
  uniforms: {
      lightpos: {
        type: 'v3',
        value: new THREE.Vector3(0, 30, 20)
      }
    },
          vertexShader: document.getElementById('myVertexShader').textContent,
          fragmentShader: document.getElementById('myFragmentShader').textContent
        });
  
  
  sceneRegular = new THREE.Scene();
   subjectClone = subject.clone();
  subjectClone.material = teapotMaterial;
  sceneRegular.add(subjectClone);
  
  var pointLight = new THREE.PointLight(0xffffff);
  pointLight.position.set(0, 300, 200);
  sceneRegular.add(pointLight);

  var ambientLight = new THREE.AmbientLight(0x555555);
  sceneRegular.add(ambientLight);

//////////////////////
  renderTarget_whole = new THREE.WebGLRenderTarget( 512,512);
   
   // scene is the final plane (to be mapped with the final subject)
   scene = new THREE.Scene();
   
   cutoutShaderMat = new THREE.ShaderMaterial ({
    uniforms: {
       texture: {type:'t', value: renderTarget_whole.texture}
    },
    vertexShader: document.getElementById('vsCut').textContent,
    fragmentShader: document.getElementById('fsCut').textContent
   });
   
   planeXX = new THREE.Mesh (new THREE.PlaneGeometry (50,50), cutoutShaderMat);
   scene.add (planeXX);
   planeXX.position.y = 25;
   scene.add (new THREE.GridHelper (400,20,'red','white'));
//////



lodertable();
 loderpenbox();
 pen();

     theObject =  new THREE.Object3D();
  readModel('WoodChair',60);
  readModel('lamp',40); 
len();


  light = new THREE.PointLight( 0xffffff, 1);
  light.position.set( 50, 50, 50 );
  light2 = new THREE.PointLight( 0xffffff, 1);
  scene0.add (light);
  scene0.add (new THREE.PointLightHelper (light,5))
  scene.add (light2);
  
  let floor = new THREE.Mesh (new THREE.PlaneGeometry (400,400), new THREE.MeshPhongMaterial());
  floor.rotation.x = -Math.PI/2;
   scene.add (floor);
   
   ////////////////////

}

function pen(){
  let loader = new THREE.TextureLoader();
  loader.crossOrigin = '';	
  let treadTex = loader.load('https://i.imgur.com/cCjirzS.jpg');
  let Material = new THREE.MeshPhongMaterial({
    map: treadTex,
    side: THREE.DoubleSide
  });
  let treadTex2 = loader.load('https://i.imgur.com/u2TQzO7.jpg');
  let Material2 = new THREE.MeshPhongMaterial({
    map: treadTex2,
    side: THREE.DoubleSide
  });
  treadTex = loader.load('https://i.imgur.com/iXsKT9H.png');
  let Material3 = new THREE.MeshPhongMaterial({
    map: treadTex,
    side: THREE.DoubleSide
  });
  var p = new THREE.Mesh(new THREE.CylinderBufferGeometry(1,1, 15, 20), Material);
  
  var cone = new THREE.Mesh( new THREE.ConeBufferGeometry( 1, 4, 32 ), Material2 );
  cone.position.y=9.5;
  p.add( cone );
  scene.add(p);
  p.rotation.z=Math.PI/8;
  p.position.set(-18.1,40,20);

  var p2 = new THREE.Mesh(new THREE.CylinderBufferGeometry(1,1, 15, 20), Material);
  var cone2 = new THREE.Mesh( new THREE.ConeBufferGeometry( 1, 4, 32 ), Material3 );
  cone2.position.y=9.5;
  p2.add( cone2 );
  scene.add(p2);
  p2.rotation.x=Math.PI/7;
  p2.rotation.z=Math.PI/8;
  p2.position.set(-16,40,23);
}

function loderpenbox(){
	let loader = new THREE.TextureLoader();
  loader.crossOrigin = '';
  let treadTex = loader.load('https://i.imgur.com/w8az8XY.jpg');
  let alpha = loader.load('https://i.imgur.com/uIOXJ2D.png');
  treadTex.repeat.set(1, 1)
  treadTex.wrapS = THREE.RepeatWrapping
  let treadMat = new THREE.MeshPhongMaterial({
    map: treadTex,
    alphaMap: alpha,
    transparent: true,
    side: THREE.DoubleSide
  });
  let treadMat2 = new THREE.MeshPhongMaterial({
    map: treadTex,
    side: THREE.DoubleSide
  });
  let geometry2 = new THREE.CylinderGeometry(5, 5, 10, 80, 2, true);
  let tread2 = new THREE.Mesh(geometry2,treadMat );
  let dot = new THREE.Mesh(new THREE.CylinderGeometry(5, 5, 1, 20),treadMat2 )
  dot.position.set(0,-4,0);
  tread2.add(dot); 
  tread2.position.set(-15,37,20);
  scene.add(tread2);


}

  function lodertable(){
    let loader = new THREE.TextureLoader();
    loader.crossOrigin = '';
    let matArray=new THREE.MeshPhongMaterial({
      map: loader.load('https://i.imgur.com/PZWNrd2.jpg'),
      side: THREE.DoubleSide});
    var box = new THREE.Mesh(new THREE.BoxGeometry(50, 5, 100), matArray);
    box.position.set(-20, 30, 0);
    scene.add(box);
    var part = [];
    for(var i=0;i<4;i++){
          part[i] = new THREE.Mesh(new THREE.CylinderBufferGeometry(3,2, 30, 64), matArray);
          var circle = new THREE.Mesh(new THREE.DodecahedronGeometry(3,5),matArray);
          circle.position.y-=10;
          part[i].add(circle);
      		scene.add(part[i]);
    }

    part[0].position.set(-41.5,15,-46.5);
    part[1].position.set(-41.5,15,46.5);
    part[2].position.set(2.5,15,-46.5);
    part[3].position.set(2.5,15,46.5);
}

 function readModel (modelName, targetSize) {
  var onProgress = function(xhr) {
    if (xhr.lengthComputable) {
      var percentComplete = xhr.loaded / xhr.total * 100;
      console.log(Math.round(percentComplete, 2) + '% downloaded');
    }
  };

  var onError = function(xhr) {};

  var mtlLoader = new THREE.MTLLoader();
  mtlLoader.setPath('models/');
  mtlLoader.load(modelName+'.mtl', function(materials) {

    materials.preload();

    var objLoader = new THREE.OBJLoader();
    objLoader.setMaterials(materials);
    objLoader.setPath('models/');
    objLoader.load(modelName+'.obj', function(object) {
		
		theObject =  unitize (object, targetSize);
		//theObject.add ( new THREE.BoxHelper (theObject) )
		theObject.name = 'OBJ'
		scene.add(theObject);
		theObject.castShadow = true
  		theObject.receiveShadow = true
		theObject.setRotationFromEuler (new THREE.Euler (3.1416/2, 0, -3.1416/2, 'ZYX'))
		
    }, onProgress, onError);

  });


}


////////////////////////////////////////
// wrap an Object3D around the given object
// so that it is centered at +Y axis
// 
function unitize (object, targetSize) {  
	
	// find bounding box of 'object'
	var box3 = new THREE.Box3();
	box3.setFromObject (object);
	var size = new THREE.Vector3();
	size.subVectors (box3.max, box3.min);
	var center = new THREE.Vector3();
	center.addVectors(box3.max, box3.min).multiplyScalar (0.5);
	
	console.log ('center: ' + center.x + ', '+center.y + ', '+center.z );
	console.log ('size: ' + size.x + ', ' +  size.y + ', '+size.z );
	
	// uniform scaling according to objSize
	var objSize = Math.max (size.x, size.y, size.z);
	var scaleSet = targetSize/objSize;
				
	
	theObject.add (object);
	object.scale.set (scaleSet, scaleSet, scaleSet);
        //console.log(whichloder);
	object.traverse( function ( child ) {

    	if ( child instanceof THREE.Mesh ) {

           child.castShadow = true;
	   child.receiveShadow = true
    	}

	} );
        if(whichloder==1){
	   object.position.set (-center.x*scaleSet, -center.y*scaleSet, -center.z*scaleSet-20);
	   object.rotation.x-=Math.PI;
	   object.rotation.y-=Math.PI/2;
           whichloder=2;
	   
	}
        else if(whichloder==2){
		
	   object.position.set (-center.x*scaleSet-52.5, -center.y*scaleSet+35, -center.z*scaleSet+35);
	   object.rotation.x+=Math.PI*2/3;
	   object.rotation.z+=Math.PI/2;
        }

	return theObject;
			
}     
function len(){
   var material = new THREE.MeshPhongMaterial({
      color: "rgb(135, 102, 0)" ,
      side: THREE.DoubleSide 
    });
    var materials = new THREE.MeshPhongMaterial({
      color: "rgb(168, 142, 64)" ,
      side: THREE.DoubleSide 
    });
    var base = new THREE.Mesh(new THREE.BoxGeometry(50, 30, 30), material);
    base.position.set(150, 70, 0);
    
    var geometry = new THREE.CircleBufferGeometry(3, 32);
    var cymaterial = new THREE.MeshPhongMaterial({
      color: "black" ,
      side: THREE.DoubleSide 
    });
    circle = new THREE.Mesh(geometry, cymaterial);
    circle.position.set(140, 73, 16);
    circle1 = new THREE.Mesh(geometry, cymaterial);
    circle1.position.set(160, 73, 16);  
    var ge = new THREE.CircleBufferGeometry(5, 1);
    circle2 = new THREE.Mesh(ge, cymaterial);
    circle2.position.set(150, 65, 16);
    circle2.rotation.z=1.55;
    
    var base2 = new THREE.Mesh(new THREE.BoxGeometry(25, 40, 25), material);
    base2.position.set(150, 40, 0);
    
    arm1 = new THREE.Mesh(new THREE.BoxGeometry(10, 40, 10), material);
    arm1.position.set(128, 40, 0);
    arm1.rotation.z=-0.4;
    arm2 = new THREE.Mesh(new THREE.BoxGeometry(10, 40, 10), material);
    arm2.position.set(172, 40, 0);
    arm2.rotation.z=0.4;
    
    leg1 = new THREE.Mesh(new THREE.BoxGeometry(10, 20, 10), material);
    leg1.position.set(143, 10, 0);
    leg2 = new THREE.Mesh(new THREE.BoxGeometry(10, 20, 10), material);
    leg2.position.set(157, 10, 0);
    
    var c1 = new THREE.Mesh(new THREE.BoxGeometry(10, 0, 25), materials);
    c1.position.set(162, 20, 0);
    c1.rotation.z=-0.7;
    var c2 = new THREE.Mesh(new THREE.BoxGeometry(10, 0, 25), materials);
    c2.position.set(135, 20, 0);
    c2.rotation.z=0.7;
    var c3 = new THREE.Mesh(new THREE.BoxGeometry(25, 0, 10), materials);
    c3.position.set(150, 20, 15);
    c3.rotation.x=0.7;
    var c4 = new THREE.Mesh(new THREE.BoxGeometry(25, 0, 10), materials);
    c4.position.set(150, 20, -15);
    c4.rotation.x=-0.7;
    ushape = new THREE.Group();
    ushape.add(base);  
    ushape.add(base2); 
    ushape.add(circle);  
    ushape.add(circle1); 
    ushape.add(circle2);
    ushape.add(arm1); 
    ushape.add(arm2); 
    ushape.add(leg1); 
    ushape.add(leg2); 
    ushape.add(c1); 
    ushape.add(c2); 
    ushape.add(c3);
    ushape.add(c4);
    //ushape.position.x+=100;
    scene.add(ushape);
}
function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
}


function animate() {
	var point = camera.position.clone().sub(subject.position).projectOnPlane (new THREE.Vector3(0,1,0));
  var angle = point.angleTo(new THREE.Vector3(0,0,1));
  //console.log(angle);
  subject.rotation.y=angle*0.5;
  subjectClone.rotation.y=angle*0.5;
    
    
    
  requestAnimationFrame(animate);
  material_shh.uniforms.imageSize.value = 60;
  // this value can alter the width of silhouette !!
  // 1024: original width
  // 512, 256, 128, ...: wider silhouette
  
  
  // scene0: torusKnot with shaderMaterial (draw eyeNormal)
  renderer.setRenderTarget (renderTarget);
  renderer.setClearColor (0x000000);
  renderer.clear();
  renderer.render (scene0, camera0);  // produce eyeNormal plot of subject
  
  // sceneRTT: fullQuad + filter (discard "near black" fragments)
  renderer.setRenderTarget (renderTarget_whole);
  renderer.setClearColor (0xffff00);  // yellow "magic" background ... to be cutout
  renderer.clear()
  renderer.render (sceneRTT, cameraRTT);  // produce outline

  // overlay the lit torusKnot
  renderer.render(sceneRegular, camera0); // camera0: the same as eyeNormal plot

  ///////// final texture completed (except boundary removal)  
  planeXX.lookAt (camera.position.x, 25, camera.position.z);
  
  renderer.setRenderTarget (null);
  renderer.setClearColor (0x888888);
  renderer.clear();
  renderer.render (scene, camera);  // planeXX (in scene) contains a shaderMaterial to cutout border
  angles += 0.01;
  light.position.set (40*Math.cos(angles), 60, 40*Math.sin(angles));
  light2.copy (light); 
      teapotMaterial.uniforms.lightpos.value.copy(light2.position);
  ushape.rotation.y-=0.001; 
if(legmove){
     leg1.rotation.x+=0.01;
     leg2.rotation.x-=0.01;
     arm1.rotation.x-=0.01;
     arm2.rotation.x+=0.01;
  }
  else {
     leg1.rotation.x-=0.01;
     leg2.rotation.x+=0.01;
     arm1.rotation.x+=0.01;
     arm2.rotation.x-=0.01;
   }
   if(leg1.rotation.x>=Math.PI/4) legmove=!legmove;
   if(leg1.rotation.x<=-Math.PI/4) legmove=!legmove;
}




</script>
</body>

</html>