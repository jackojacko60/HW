<html>

  <head>
    <style>
      .test {
        position: absolute;
        top: 20px;
        width: 100%;
        text-align: center;
      }

      .score {
        position: absolute;
        text-align: center;
        left: 20px;
        top: 20px;
      }

      .game {
        position: absolute;
        top: 45px;
        width: 100%;
        text-align: center;
      }

    </style>
  </head>

  <body>
    <div class="test" id="test"><button>start</button></div>
    <div class="game" id="game">遊戲方法:<br> 車身:W往前 S往後 A左轉 D右轉<br>砲塔: Q左旋轉 E右旋轉 Z上旋轉 C下旋轉</div>
    <div class="score" id="score">score: 0</div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="https://jyunming-chen.github.io/tutsplus/js/KeyboardState.js"></script>
    <script>
      var renderer, scene, camera, controls, tank, turret, turn, cannon, bu, ny = true,
        score = 0;
      var balls = [],
        ball;
      var keyboard = new KeyboardState();
      class Ball {
        constructor(mesh, x = 0, y = 0, z = 0) {
          this.mesh = mesh;
          scene.add(this.mesh);
          this.pos = new THREE.Vector3(x + Math.sin(turret.rotation.y + Math.PI / 2 + tank.rotation.y) * 17.5, y, z + Math.cos(turret.rotation.y + Math.PI / 2 + tank.rotation.y) * 17.5); // 初始位置
          //tank 位置為物體正中心點 取tank.position
          //因為須由砲管cannon前端發射 所以加上cannon面對的向量
          //算法同下初速算法 
          //y初始位置 = turn.rotation.z*10+15
          this.vel = new THREE.Vector3(Math.sin(turret.rotation.y + Math.PI / 2 + tank.rotation.y) * 40, Math.sin(turn.rotation.z) * 40, Math.cos(turret.rotation.y + Math.PI / 2 + tank.rotation.y) * 40); // 初速
          //以turret旋轉y +tank旋轉y = 總旋轉 y 
          //加上偏差Math.PI/2 90度角 
          //取cos 和 sin 作為z 和 x 向量
          //turn 旋轉z 取sin 作為 y向量 
          this.force = new THREE.Vector3(0, -20, 0); // 重力


          this.m = 1;
        }
        update(dt) {
          this.vel.add(this.force.clone().multiplyScalar(dt / this.m));
          this.pos.add(this.vel.clone().multiplyScalar(dt));

          if (this.pos.y < 0) {
            this.pos.y = 0;
            this.vel.y *= -0.85;
          }
          if (this.pos.x > 100 || this.pos.x < -100 || this.pos.z > 100 || this.pos.z < -100) {
            scene.remove(this.mesh);
          } //子彈超出地圖外
          this.mesh.position.copy(this.pos);


          //打中標靶
          if (this.pos.x <= bu.position.x + 10 && this.pos.x >= bu.position.x - 10 && this.pos.y <= bu.position.y + 10 && this.pos.y >= bu.position.y - 10 && this.pos.z <= bu.position.z + 10 && this.pos.z >= bu.position.z - 10 && !ny) {
            ny = !ny;
            score++;
            $("#score").text("score: " + score);
          }
        }
      }

      //開始按鈕
      $("#test").click(function() {
        $("#test").text("");
        $("#game").text("");
      });
      init();
      animate();

      function buildParts() {
        var parts = [];

        var mat = new THREE.MeshNormalMaterial();
        var base = new THREE.Object3D();
        var baseMesh = new THREE.Mesh(new THREE.BoxGeometry(40, 10, 20), mat);
        base.add(baseMesh);
        baseMesh.position.set(-10, 5, 0);
        parts.push(base);

        turret = new THREE.Mesh(new THREE.CylinderGeometry(10, 10, 10, 30), mat);
        parts.push(turret);

        turn = new THREE.Object3D();
        var turnMesh = new THREE.Mesh(new THREE.CylinderGeometry(1.5, 1.5, 10, 30), mat);
        turn.add(turnMesh);
        turnMesh.rotation.x = Math.PI / 2;
        parts.push(turn);

        cannon = new THREE.Object3D()
        var cannon0 = new THREE.Object3D()
        var cannonMesh = new THREE.Mesh(new THREE.CylinderGeometry(1.5, 1.5, 10, 30), mat);
        cannon0.add(cannonMesh);
        cannonMesh.position.y = 5;
        cannon.add(cannon0);
        cannon0.rotation.z = -Math.PI / 2;
        parts.push(cannon);

        return parts;
      }

      function buildTank() {

        let parts = buildParts();

        let tank = new THREE.Object3D();

        let base = parts[0]
        tank.add(base);

        let turret = parts[1]
        tank.add(turret);
        turret.position.set(0, 15, 0);

        let turn = parts[2]
        turn.position.x = 10
        turret.add(turn);
        turn.rotation.z = 0;
        let cannon = parts[3]
        turn.add(cannon);
        return tank;
      }



      function init() {
        renderer = new THREE.WebGLRenderer();
        document.body.appendChild(renderer.domElement);
        var width = window.innerWidth;
        var height = window.innerHeight;
        renderer.setSize(width, height);
        renderer.setClearColor(0x888888);
        scene = new THREE.Scene();
        var grid = new THREE.GridHelper(200, 20, 'red', 'white');
        scene.add(grid);
        var axes = new THREE.AxesHelper(5);
        scene.add(axes);
        camera = new THREE.PerspectiveCamera(35, width / height, 1, 3000);
        camera.position.y = 0;
        camera.position.z = 400;
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        window.addEventListener('resize', onWindowResize, false);
        ////////////////////////////////////////////////////////////////
        ball = new THREE.Mesh(new THREE.SphereGeometry(2, 5, 5),
          new THREE.MeshNormalMaterial());

        clock = new THREE.Clock();
        tank = buildTank();
        scene.add(tank);
      }



      function onWindowResize() {

        var width = window.innerWidth;
        var height = window.innerHeight;
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        renderer.setSize(width, height);

      }

      //生成標靶
      function buildbu() {
        scene.remove(bu);
        var x = Math.random() * 200 - 100,
          z = Math.random() * 200 - 100,
          y = Math.random() * 50;
        bu = new THREE.Mesh(new THREE.BoxGeometry(10, 10, 10), new THREE.MeshNormalMaterial({
          side: THREE.DoubleSide
        }));
        bu.position.x = x;
        bu.position.z = z;
        bu.position.y = y;
        scene.add(bu);
      }

      //控制 坦克移動範圍限制、旋轉角度限制
      function checkmax() {
        if (tank.position.x > 100) tank.position.x = 100;
        else if (tank.position.x < -100) tank.position.x = -100;
        if (tank.position.z > 100) tank.position.z = 100;
        else if (tank.position.z < -100) tank.position.z = -100;
        if (turn.rotation.z < -Math.PI / 4) turn.rotation.z = -Math.PI / 4;
        else if (turn.rotation.z > Math.PI / 4) turn.rotation.z = Math.PI / 4;
        if (turret.rotation.y < -Math.PI / 4) turret.rotation.y = -Math.PI / 4;
        else if (turret.rotation.y > Math.PI / 4) turret.rotation.y = Math.PI / 4;
      }


      function animate() {
        let dt = clock.getDelta();
        keyboard.update();
        var vector = new THREE.Vector3(0, 1, 0);
        if (keyboard.pressed("W")) tank.position.add(new THREE.Vector3(1, 0, 0).applyAxisAngle(vector, tank.rotation.y));
        if (keyboard.pressed("S")) tank.position.add(new THREE.Vector3(-1, 0, 0).applyAxisAngle(vector, tank.rotation.y));
        if (keyboard.pressed("A")) tank.rotation.y += 0.05;
        if (keyboard.pressed("D")) tank.rotation.y -= 0.05;
        if (keyboard.pressed("Q")) turret.rotation.y += 0.1;
        if (keyboard.pressed("E")) turret.rotation.y -= 0.1;
        if (keyboard.pressed("Z")) turn.rotation.z += 0.1;
        if (keyboard.pressed("C")) turn.rotation.z -= 0.1;
        if (keyboard.down("X")) {
          balls.push(new Ball(ball.clone(), tank.position.x, turn.rotation.z * 10 + 15, tank.position.z));
        }
        checkmax();
        if (ny) {
          buildbu();
          ny = !ny;
        }

        balls.forEach(function(b) {
          b.update(dt)
        });
        requestAnimationFrame(animate);
        render();


      }

      function render() {

        renderer.render(scene, camera);

      }

    </script>
  </body>

</html>
